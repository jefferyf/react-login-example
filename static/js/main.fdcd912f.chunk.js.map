{"version":3,"sources":["components/LoggedOut.jsx","components/LoggedIn.jsx","App.js","serviceWorker.js","index.js"],"names":["LoggedOut","handleSubmit","event","a","preventDefault","state","username","password","props","loginHandler","handleChange","e","setState","target","id","value","this","errorMessage","className","onSubmit","htmlFor","onChange","type","Component","LoggedIn","token","logoutHandler","onClick","App","loginAsync","settings","method","headers","Accept","body","JSON","stringify","email","fetch","response","json","data","ok","isLoggedIn","error","logout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2QAsDeA,E,kDAnDb,aAAe,IAAD,8BACZ,gBAOFC,aARc,uCAQC,WAAOC,GAAP,mBAAAC,EAAA,6DACbD,EAAME,iBADO,EAEkB,EAAKC,MAA5BC,EAFK,EAELA,SAAUC,EAFL,EAEKA,SAFL,SAGP,EAAKC,MAAMC,aAAaH,EAAUC,GAH3B,2CARD,wDAcdG,aAAe,SAAAC,GACb,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,SAbxC,EAAKV,MAAQ,CACXC,SAAU,GACVC,SAAU,IAJA,E,qDAkBJ,IAAD,EACwBS,KAAKX,MAA5BC,EADD,EACCA,SAAUC,EADX,EACWA,SACVU,EAAiBD,KAAKR,MAAtBS,aAER,OACE,yBAAKC,UAAU,OAEZD,EAAe,2BAAIA,GAAoB,KAExC,0BAAME,SAAUH,KAAKf,cACnB,6BACE,2BAAOmB,QAAQ,YAAf,YAEM,2BAAON,GAAG,WAAWC,MAAOT,EAAUe,SAAUL,KAAKN,iBAI7D,6BACE,2BAAOU,QAAQ,YAAf,YAEM,2BAAON,GAAG,WAAWQ,KAAK,WAAWP,MAAOR,EAAUc,SAAUL,KAAKN,iBAI7E,6BACE,2BAAOY,KAAK,SAASP,MAAM,kB,GA5CfQ,aCAXC,EAAW,SAAChB,GAAW,IAC1BiB,EAAyBjB,EAAzBiB,MAAOC,EAAkBlB,EAAlBkB,cAEf,OACE,6BACE,yCAAeD,GACf,4BAAQE,QAASD,GAAjB,aCuDSE,E,kDA1Db,aAAe,IAAD,8BACZ,gBAQFC,WATc,uCASD,WAAOvB,EAAUC,GAAjB,mBAAAJ,EAAA,6DACL2B,EAAW,CACfC,OAAQ,OACRC,QAAS,CACPC,OAAQ,mBACR,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEC,MAAO/B,EAAUC,cAP/B,kBAWY+B,MAAM,8BAA+BR,GAXjD,cAWLS,EAXK,gBAYQA,EAASC,OAZjB,OAYLC,EAZK,OAaLF,EAASG,GACX,EAAK9B,SAAS,CACZ+B,YAAY,EACZlB,MAAOgB,EAAKhB,QAGd,EAAKb,SAAS,CAAEK,aAAcwB,EAAKG,QAnB5B,kDAsBT,EAAKhC,SAAS,CAAEK,aAAckB,KAAKC,UAAL,QAtBrB,0DATC,0DAmCdS,OAAS,WACP,EAAKjC,SAAS,CACZ+B,YAAY,EACZlB,MAAO,GACPR,aAAc,gBArChB,EAAKZ,MAAQ,CACXsC,YAAY,EACZ1B,aAAc,GACdQ,MAAO,IALG,E,qDA2CJ,IAAD,EACqCT,KAAKX,MAAzCY,EADD,EACCA,aAAc0B,EADf,EACeA,WAAYlB,EAD3B,EAC2BA,MAElC,OACE,yBAAKP,UAAU,OACXyB,EAEE,kBAAC,EAAD,CAAUlB,MAAOA,EAAOC,cAAeV,KAAK6B,SAD5C,kBAAC,EAAD,CAAW5B,aAAcA,EAAcR,aAAcO,KAAKa,kB,GAlDpDN,aCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAMoB,c","file":"static/js/main.fdcd912f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass LoggedOut extends Component {\n  constructor() {\n    super();\n    this.state = {\n      username: '',\n      password: ''\n    }\n  }\n\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const { username, password } = this.state;\n    await this.props.loginHandler(username, password);\n  }\n\n  handleChange = e => {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  render() {\n    const { username, password } = this.state;\n    const { errorMessage } = this.props;\n\n    return (\n      <div className=\"App\">\n\n        {errorMessage ? <p>{errorMessage}</p> : null}\n\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <label htmlFor=\"username\">\n              Username:\n                  <input id=\"username\" value={username} onChange={this.handleChange} />\n            </label>\n          </div>\n\n          <div>\n            <label htmlFor=\"password\">\n              Password:\n                  <input id=\"password\" type=\"password\" value={password} onChange={this.handleChange} />\n            </label>\n          </div>\n\n          <div>\n            <input type=\"submit\" value=\"Submit\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoggedOut;","import React from 'react';\n\nexport const LoggedIn = (props) => {\n  const { token, logoutHandler } = props;\n\n  return (\n    <div>\n      <p>Logged In: {token}</p>\n      <button onClick={logoutHandler}>Log Out</button>\n    </div>    \n  );\n}","import React, { Component } from 'react';\nimport LoggedOut from './components/LoggedOut.jsx';\nimport { LoggedIn } from './components/LoggedIn';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n      errorMessage: '',\n      token: ''\n    }\n  }\n\n  loginAsync = async (username, password) => {\n    const settings = {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email: username, password })\n    };\n\n    try {\n      let response = await fetch('https://reqres.in/api/login', settings);\n      let data = await response.json();\n      if (response.ok) {\n        this.setState({         \n          isLoggedIn: true,\n          token: data.token\n        });\n      } else {\n        this.setState({ errorMessage: data.error });\n      }\n    } catch (e) {\n      this.setState({ errorMessage: JSON.stringify(e) });\n    }\n  }\n\n  logout = () => {\n    this.setState({\n      isLoggedIn: false,\n      token: '',\n      errorMessage: 'Logged out'\n    });\n  }  \n\n  render() {\n    const { errorMessage, isLoggedIn, token } = this.state;\n\n    return (\n      <div className=\"App\">\n        {!isLoggedIn\n          ? <LoggedOut errorMessage={errorMessage} loginHandler={this.loginAsync} />\n          : <LoggedIn token={token} logoutHandler={this.logout} />\n        }        \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}